name: Docker Nginx ECS Build, Test, & Log Creation

on:
  push:
    branches:
      - main 

jobs:
  create-ecs-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create ECS Repository
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
          aws ecr create-repository --repository-name ${{ secrets.IMAGE_NAME }} || true

  build-and-push:
    needs: create-ecs-repo
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev]

    env:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
      IMAGE_TAG: ${{ github.sha }}
      ECS_REPO: 058264420716.dkr.ecr.us-east-1.amazonaws.com/nginx

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Docker Nginx Image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG -f Dockerfile.yml .
          docker tag $IMAGE_NAME:$IMAGE_TAG $ECS_REPO:$IMAGE_TAG
    
      - name: Push Docker Nginx Image to ECS
        run: |
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECS_REPO
          docker push $ECS_REPO:$IMAGE_TAG

  test:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies and Verify
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl --version
          docker --version

  create-logs:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

            # Step to create ECS cluster
      - name: Create ECS Cluster
        run: |
          aws ecs create-cluster --cluster-name my-ecs-cluster
     # Step to register task definition
      - name: Register Task Definition
        run: |
          aws ecs register-task-definition \
            --family nginx-task \
            --container-definitions '[{"name":"my-container","image":"${{ secrets.IMAGE_NAME }}.dkr.ecr.us-east-1.amazonaws.com/ecr-project9047","portMappings":[{"containerPort":80}],"memoryReservation":128}]'
     # Step to create ECS service
      - name: Create or Update ECS Service with Retry
        run: |
          retries=3
          while [ $retries -gt 0 ]; do
            aws ecs create-service \
              --cluster my-ecs-cluster \
              --service-name nginx-service \
              --task-definition nginx-task \
              --desired-count 1 \
              --launch-type EC2 \
              --region ${{ secrets.AWS_REGION }} && break
            retries=$((retries-1))
            sleep 10  # Wait before retrying
          done
     # Step to wait for service to stabilize
      - name: Wait for Service Stabilize
        run: |
          aws ecs wait services-stable \
            --cluster my-ecs-cluster \
            --services nginx-service \
            --region ${{ secrets.AWS_REGION }} \
            --waiter-timeout 900  # Increase timeout to 900 seconds (15 minutes)

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      
